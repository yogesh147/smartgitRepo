Stream API is used to process collections of objects.
It is a sequence of object that supports various methods which can be pipelined to produce desired results
It is not a Data Structure instead it takes I/P from collections, arrays and I/O channels.
It does not change Data Structure, they only provide results based on pipelined methods (with terminal methods)

WHY IT NEED ?

First use is, Functional programming by using lambdas expression.
Second is, Code reduced by using streams method chaining process.    
Third is , Perform bulk operations (filter -> map -> forEach ).

==================================================================================================
MAP And Flat MAP :-

These are java 8 stream API intermediate methods which return another stream as part of output.

MAP :-

MAP is used for transformation. 
Stream<R> map(Stream<T> input){} , 
produce single value for each input (one-to-one mapping)

E.g:- stream.of("a","b","c") ----> [A,B,C] (transforms lower to upper case)

================================================================================================
Flat MAP :-

Flat MAP is used for transformation and flattering. 
Stream<R> map(Stream<Stream<T>> input){}, 
produce multiple value for each input (one-to-many mapping)

E.g:- stream.of([1,2], [3,4], [5,6]) ----> [1,2,3,4,5,6] (transforms Stream of stream into single stream)

===========================================================================================================
Map-Reduce:-

Map and reduce are functional programming ( Approach ) model use (instead of iterative approach used before )for two purpose :-
Map :- Transforming data & syntax is --> Stream<R> map(Stream<T> input){}.
reduce :- aggregate data & syntax is --> T reduce(T identity, BinaryOperator<T> accumulator).
			So, identity is like initial value and accumulator is data function. 

EG:- Stream : [1,2,3,4,5,6], find sum of stream elements?

Sol:- Map :- Transform Stream<Object> --->   Stream<Int>
	  Reduce :- Combined Stream<Int> to produce sum
	  
     Integer sumofStream = Stream.of(2,4,6,8,10)
     					   .reduce(0, (a,b)-> a+b);
 ---------------------------------------				   
 Real world Eg:- find avg salary of employ class A (  Here we use filter, Map amd Reduce fxn) :-
 -----------------------------------------  
   	 
   A            A ----------> 1000
                     map
   B
       filter
   A  --------> A ----------> 1000  -------------> 1000 (Avg Salary)
   					map					Reduce
   C
   
   A  			A ----------> 1000   
     				map	   
 ===========================================================================================================
     					   	  
 





